{"remainingRequest":"/home/darkey/web/9/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/darkey/web/9/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/darkey/web/9/src/App.vue","mtime":1545474160761},{"path":"/home/darkey/web/9/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkey/web/9/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkey/web/9/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkey/web/9/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Header from './components/Header'\nimport Middle from './components/Middle'\nimport Footer from './components/Footer'\n\nexport default {\n    name: 'app',\n    data: function () {\n        return this.$root.$data;\n    },\n    components: {\n        Header,\n        Middle,\n        Footer\n    }, beforeCreate() {\n        this.$root.$on(\"OnRegisterUser\", (login, name) => {\n            let loginRegExp = /^[a-z]+$/;\n            let nameRegExp = /^[a-zA-Z' ']+$/;\n            if (!login || login.length < 3 || login.length > 16 || !loginRegExp.test(login)) {\n                this.$root.$emit(\"onRegisterValidationError\", \"Login is invalid.\");\n            } else if (!name  || name.length < 1 || name.length > 32 || !nameRegExp.test(name)) {\n                this.$root.$emit(\"onRegisterValidationError\", \"Name is invalid.\");\n            } else if (Object.values(this.users).filter(u => u.login === login).length > 0) {\n                this.$root.$emit(\"onRegisterValidationError\", \"Login is already in use.\");\n            } else {\n                const id = Math.max(...Object.keys(this.users))+ 1;\n                this.$set(this.users, id, {\n                    id,\n                    login,\n                    name,\n                });\n                this.$root.$emit(\"onChangePage\", \"Enter\");\n            }\n        });\n\n        this.$root.$on(\"onLogout\", () => {\n            this.userId = null;\n        });\n        this.$root.$on(\"onEnter\", (login) => {\n            let users = Object.values(this.users).filter(u => u.login === login);\n            if (users.length) {\n                this.userId = users[0].id;\n                this.$root.$emit(\"onEnterSuccess\");\n            } else {\n                this.$root.$emit(\"onEnterValidationError\", \"Invalid login/password.\");\n            }\n        });\n        this.$root.$on(\"onAddPost\", (title, text) => {\n            if (this.userId) {\n                if (!title || title.length > 5) {\n                    this.$root.$emit(\"onAddPostValidationError\", \"Title is invalid\");\n                } else if (!text || text.length > 10) {\n                    this.$root.$emit(\"onAddPostValidationError\", \"Text is invalid\");\n                } else {\n                    const id = Math.max(...Object.keys(this.posts)) + 1;\n                    this.$set(this.posts, id, {\n                        id,\n                        userId: this.userId,\n                        title,\n                        text\n                    })\n                }\n            } else {\n                this.$root.$emit(\"onAddPostValidationError\", \"No access\");\n            }\n        });\n        this.$root.$on(\"onEditPost\", (id, text) => {\n            if (this.userId) {\n                if (!id) {\n                    this.$root.$emit(\"onEditPostValidationError\", \"ID is invalid\");\n                } else if (!text || text.length > 10) {\n                    this.$root.$emit(\"onEditPostValidationError\", \"Text is invalid\");\n                } else {\n                    let posts = Object.values(this.posts).filter(p => p.id === parseInt(id));\n                    if (posts.length) {\n                        posts.forEach((item) => {\n                            item.text = text;\n                        });\n                    } else {\n                        this.$root.$emit(\"onEditPostValidationError\", \"No such post\");\n                    }\n                }\n            } else {\n                this.$root.$emit(\"onEditPostValidationError\", \"No access\");\n            }\n        });\n    }\n}\n",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;AAUA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n    <!--suppress HtmlUnknownTag -->\n    <body id=\"app\">\n    <Header :userId=\"userId\" :users=\"users\"/>\n    <Middle :users=\"users\" :posts=\"posts\" :comments=\"comments\"/>\n    <Footer/>\n    </body>\n</template>\n\n<script>\n    import Header from './components/Header'\n    import Middle from './components/Middle'\n    import Footer from './components/Footer'\n\n    export default {\n        name: 'app',\n        data: function () {\n            return this.$root.$data;\n        },\n        components: {\n            Header,\n            Middle,\n            Footer\n        }, beforeCreate() {\n            this.$root.$on(\"OnRegisterUser\", (login, name) => {\n                let loginRegExp = /^[a-z]+$/;\n                let nameRegExp = /^[a-zA-Z' ']+$/;\n                if (!login || login.length < 3 || login.length > 16 || !loginRegExp.test(login)) {\n                    this.$root.$emit(\"onRegisterValidationError\", \"Login is invalid.\");\n                } else if (!name  || name.length < 1 || name.length > 32 || !nameRegExp.test(name)) {\n                    this.$root.$emit(\"onRegisterValidationError\", \"Name is invalid.\");\n                } else if (Object.values(this.users).filter(u => u.login === login).length > 0) {\n                    this.$root.$emit(\"onRegisterValidationError\", \"Login is already in use.\");\n                } else {\n                    const id = Math.max(...Object.keys(this.users))+ 1;\n                    this.$set(this.users, id, {\n                        id,\n                        login,\n                        name,\n                    });\n                    this.$root.$emit(\"onChangePage\", \"Enter\");\n                }\n            });\n\n            this.$root.$on(\"onLogout\", () => {\n                this.userId = null;\n            });\n            this.$root.$on(\"onEnter\", (login) => {\n                let users = Object.values(this.users).filter(u => u.login === login);\n                if (users.length) {\n                    this.userId = users[0].id;\n                    this.$root.$emit(\"onEnterSuccess\");\n                } else {\n                    this.$root.$emit(\"onEnterValidationError\", \"Invalid login/password.\");\n                }\n            });\n            this.$root.$on(\"onAddPost\", (title, text) => {\n                if (this.userId) {\n                    if (!title || title.length > 5) {\n                        this.$root.$emit(\"onAddPostValidationError\", \"Title is invalid\");\n                    } else if (!text || text.length > 10) {\n                        this.$root.$emit(\"onAddPostValidationError\", \"Text is invalid\");\n                    } else {\n                        const id = Math.max(...Object.keys(this.posts)) + 1;\n                        this.$set(this.posts, id, {\n                            id,\n                            userId: this.userId,\n                            title,\n                            text\n                        })\n                    }\n                } else {\n                    this.$root.$emit(\"onAddPostValidationError\", \"No access\");\n                }\n            });\n            this.$root.$on(\"onEditPost\", (id, text) => {\n                if (this.userId) {\n                    if (!id) {\n                        this.$root.$emit(\"onEditPostValidationError\", \"ID is invalid\");\n                    } else if (!text || text.length > 10) {\n                        this.$root.$emit(\"onEditPostValidationError\", \"Text is invalid\");\n                    } else {\n                        let posts = Object.values(this.posts).filter(p => p.id === parseInt(id));\n                        if (posts.length) {\n                            posts.forEach((item) => {\n                                item.text = text;\n                            });\n                        } else {\n                            this.$root.$emit(\"onEditPostValidationError\", \"No such post\");\n                        }\n                    }\n                } else {\n                    this.$root.$emit(\"onEditPostValidationError\", \"No access\");\n                }\n            });\n        }\n    }\n</script>\n\n<style>\n</style>\n"]}]}